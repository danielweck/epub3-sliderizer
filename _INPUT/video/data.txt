// --------------------------------------------
_TITLE
EPUB3 remote video tests

// --------------------------------------------
_FILE_EPUB
EPUB3-Sliderizer_video.epub

// --------------------------------------------
_CREATOR
Daniel Weck

// #########################################################
// #########################################################
// #########################################################
-SLIDE

// --------------------------------------------
_TITLE
Embedded video (remote host)

// --------------------------------------------
_CONTENT

NO-MARKDOWN

<video id="video_embed" class="fullxx" controls="controls">
<source src="http://html5demos.com/assets/dizzy.mp4" type="video/mp4" />
<source src="http://html5demos.com/assets/dizzy.webm" type="video/webm" >
<source src="http://html5demos.com/assets/dizzy.ogv" type="video/ogg"></source>
</video>

// --------------------------------------------
_CSS_STYLE

#video_embed
{
    border: 2px solid red;
    
    width: 1000px;
    height: 650px;
}


// #########################################################
// #########################################################
// #########################################################
-SLIDE

// --------------------------------------------
_TITLE
Embedded video (YouTube API)

// --------------------------------------------
_CONTENT

NO-MARKDOWN

<iframe id="youtube_embed" class="fullxx" src="http://www.youtube.com/embed/dP15zlyra3c?enablejsapi=1&html5=1"></iframe>
<!-- &origin=* -->


<!-- iframe id="youtube_api" class="fullxx" src="https://www.youtube.com/iframe_api"></iframe -->

<!-- video class="video-stream html5-main-video" x-webkit-airplay="allow" data-youtube-id="dP15zlyra3c"></video -->

<!-- MediaElement.js
video id="youtube_embed" class="fullxx" controls="controls">
    <source type="video/youtube" src="http://www.youtube.com/watch?v=dP15zlyra3c"/>
    HTML5 video not supported :(
</video -->

// --------------------------------------------
_CSS_STYLE

#youtube_embed,
#youtube_api,
#youtube_player
{
    border: 2px solid red;
    
    width: 1000px;
    height: 650px;
}

#youtube_player
{
    border: 2px solid blue;
}

// --------------------------------------------
// _FILES_JS
// mediaelement.js

// --------------------------------------------
_JS_SCRIPT

// function setupYouTube()
// {
//     new MediaElement(document.getElementById("youtube_embed")); //, {mode: "native", plugins: ['youtube']}
// }
// document.addEventListener("DOMContentLoaded", function(e) { setTimeout(setupYouTube, 2000); }, false);

/*
var player;
function onPlayerReady(event) {
console.error("onPlayerReady");
//        event.target.playVideo();
      }
      
      var done = false;
      function onPlayerStateChange(event) {
console.error("onPlayerStateChange");

        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
*/

function onYouTubeIframeAPIReady() {

console.error("onYouTubeIframeAPIReady");

/*
  player = new YT.Player(
  document.getElementById("youtube_embed"),
  //'youtube_embed',
  {
    events: {
    'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    }
  });

//console.log(player);
//console.debug(YT.Player);


    callPlayer("youtube_embed", function() {
        // "onYouTubePlayerReady"
        callPlayer("youtube_embed", "playVideo");
    });
        callPlayer("youtube_embed", "playVideo");
        
// player.playVideo();
*/
}

/**
 * @author       Rob W <gwnRob@gmail.com>
 * @website      http://stackoverflow.com/a/7513356/938089
 * @version      20131010
 * @description  Executes function on a framed YouTube video (see website link)
 *               For a full list of possible functions, see:
 *               https://developers.google.com/youtube/js_api_reference
 * @param String frame_id The id of (the div containing) the frame
 * @param String func     Desired function to call, eg. "playVideo"
 *        (Function)      Function to call when the player is ready.
 * @param Array  args     (optional) List of arguments to pass to function func*/
function callPlayer(frame_id, func, args) {
    if (window.jQuery && frame_id instanceof jQuery) frame_id = frame_id.get(0).id;
    var iframe = document.getElementById(frame_id);
    if (iframe && iframe.tagName.toUpperCase() != 'IFRAME') {
        iframe = iframe.getElementsByTagName('iframe')[0];
    }

    // When the player is not ready yet, add the event to a queue
    // Each frame_id is associated with an own queue.
    // Each queue has three possible states:
    //  undefined = uninitialised / array = queue / 0 = ready
    if (!callPlayer.queue) callPlayer.queue = {};
    var queue = callPlayer.queue[frame_id],
        domReady = document.readyState == 'complete';

    if (domReady && !iframe) {
        // DOM is ready and iframe does not exist. Log a message
        window.console && console.log('callPlayer: Frame not found; id=' + frame_id);
        if (queue) clearInterval(queue.poller);
    } else if (func === 'listening') {
        // Sending the "listener" message to the frame, to request status updates
        if (iframe && iframe.contentWindow) {
            func = '{"event":"listening","id":' + JSON.stringify(''+frame_id) + '}';
            iframe.contentWindow.postMessage(func, '*');
        }
    } else if (!domReady ||
               iframe && (!iframe.contentWindow || queue && !queue.ready) ||
               (!queue || !queue.ready) && typeof func === 'function') {

        if (!queue) queue = callPlayer.queue[frame_id] = [];
        queue.push([func, args]);
        if (!('poller' in queue)) {
            // keep polling until the document and frame is ready
            queue.poller = setInterval(function() {
                callPlayer(frame_id, 'listening');
            }, 250);
            // Add a global "message" event listener, to catch status updates:
            messageEvent(1, function runOnceReady(e) {
                if (!iframe) {
                    iframe = document.getElementById(frame_id);
                    if (!iframe) return;
                    if (iframe.tagName.toUpperCase() != 'IFRAME') {
                        iframe = iframe.getElementsByTagName('iframe')[0];
                        if (!iframe) return;
                    }
                }
                if (e.source === iframe.contentWindow) {
                    // Assume that the player is ready if we receive a
                    // message from the iframe
                    clearInterval(queue.poller);
                    queue.ready = true;
                    messageEvent(0, runOnceReady);
                    // .. and release the queue:
                    while (tmp = queue.shift()) {
                        callPlayer(frame_id, tmp[0], tmp[1]);
                    }
                }
            }, false);
        }
    } else if (iframe && iframe.contentWindow) {
        // When a function is supplied, just call it (like "onYouTubePlayerReady")
        if (func.call) return func();
        
        // Frame exists, send message
        iframe.contentWindow.postMessage(JSON.stringify({
            "event": "command",
            "func": func,
            "args": args || [],
            "id": frame_id
        }), "*");
    }
    /* IE8 does not support addEventListener... */
    function messageEvent(add, listener) {
        var w3 = add ? window.addEventListener : window.removeEventListener;
        w3 ?
            w3('message', listener, !1)
        :
            (add ? window.attachEvent : window.detachEvent)('onmessage', listener);
    }
}
      
function setupYouTube()
{
    /*
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    */
    
    /*
    callPlayer("youtube_embed", function() {
console.error("CALLPLAYER - onYouTubeIframeAPIReady");
        callPlayer("youtube_embed", "playVideo");
    });
    */

var root = document.getElementById("epb3sldrzr-content");
var info = document.createElement('p');
root.insertBefore(info, root.childNodes[0]);
setTimeout(function()
{
    info.style.backgroundColor = "white";
    info.style.color = "black";
    info.style.padding = "0.2em";
}, 500);

var txt_ = document.createTextNode("DEBUG");
info.appendChild(txt_);

    
    callPlayer("youtube_embed", function()
    {

    var txtX = document.createTextNode("Ha!");
    info.appendChild(txtX);
    
    callPlayer("youtube_embed", "mute"); //unMute
    callPlayer("youtube_embed", "playVideo");

    setTimeout(function()
    {
    callPlayer("youtube_embed", "pauseVideo");
    
        var iframe = document.getElementById("youtube_embed");
        
        var id = iframe.id;
        if (!id)
        {
            id = iframe.getAttribute(id);
        }
        
        var doc = iframe.contentDocument || iframe.contentWindow.document;
        var videos = doc.getElementsByTagName("video");
        //videos[0].addEventListener("timeupdate", function(e) { console.error("HERE"); }, false);

var src = videos[0].getAttribute("src");

var txt = document.createTextNode("video src: " + src);
info.appendChild(txt);


var video = document.createElement('video');
video.setAttribute("src", src);

video.id = id;
video.setAttribute("id", id);

video.setAttribute("type", "video/mp4");

video.setAttribute("controls", "controls");

    iframe.parentNode.replaceChild(video, iframe);

    
    }, 500);
    
    });
}

document.addEventListener("DOMContentLoaded", function(e) { setTimeout(setupYouTube, 100); }, false);
