// --------------------------------------------
_TITLE
EPUB3 epubReadingSystem

// --------------------------------------------
_FILE_EPUB
EPUB3-Sliderizer_epubReadingSystem.epub

// --------------------------------------------
_CREATOR
Daniel Weck

// #########################################################
// #########################################################
// #########################################################
-SLIDE

// --------------------------------------------
_TITLE
navigator.epubReadingSystem

// --------------------------------------------
_CONTENT

NO-MARKDOWN

<!--
Note that any HTML entity (not valid XML) triggers "tagsoup" parser mode in Epub3Sliderizer:

&nbsp;
-->

<!--
Line breaks in the divs below are important! (could be replaced by space character, or the above equivalent HTML emtity)
(otherwise the markup adopts self-closing XML elements, which break HTML parser in web browsers)
-->

<div id="spinner" class="full">
</div>

<div id="dropzone"><p>
</p></div>

// --------------------------------------------
_CSS_STYLE

.propName
{
    font-weight: bold;
    font-family: monospace;
}

.propValue
{
    display: block;
    width: 100%;
    
    text-align: right;
    padding-right: 0.3em;
}

.function
{
    font-style: italic;
    opacity: 0.6;
}

.objectOrArray
{
    color: #880000;
    text-transform: uppercase;
}

.index
{
    color: #006633;
}

#dropzone > ul
{
    margin-left: 0;
}

ul
{
    margin-left: 0.5em;
}

li
{
    border-top: 0.15em solid #dddddd;
    border-left: 0.1em dashed #dddddd;
}

li:before
{
    content: '' !important;
    padding-right: 0;
}

li.name
{
    background-color: #F8FBEF;
}

#dropzone
{
    width: 100%;
}

#spinner
{
    -PREFIXED_PROPERTY-animation: rotation .6s infinite linear;
    -PREFIXED_PROPERTY-border-radius: 100%;
	
    border-left: 0.5em solid rgba(0,174,239,.15);
    border-right: 0.5em solid rgba(0,174,239,.15);
    border-bottom: 0.5em solid rgba(0,174,239,.15);
    border-top: 0.5em solid rgba(0,174,239,.8);
    
    /*
    -PREFIXED_PROPERTY-animation: sweep 1s infinite linear;
    -PREFIXED_PROPERTY-border-radius: 1em;
    border-bottom: 0.5em solid black;
    */
}

_PREFIXED_@keyframes rotation
{
	from
    {
        -PREFIXED_PROPERTY-transform: rotate(0deg);
    }
    
	to
    {
        -PREFIXED_PROPERTY-transform: rotate(359deg);
    }
}
_PREFIXED_@keyframes sweep
{
    to
    {
        -PREFIXED_PROPERTY-transform: rotate(360deg);
    }
}

// --------------------------------------------
_JS_SCRIPT

document.addEventListener("DOMContentLoaded", function(e) { setTimeout(dump, 1500); }, false);

function dump()
{

    if (!navigator.epubReadingSystem)
    {
        navigator.epubReadingSystem = {
            name: "FAKE (simulated Javascript object)",
            version: "0.0.0",
            layoutStyle: "paginated",
            hasFeature: function (feature, version) {

                // for now all features must be version 1.0 so fail fast if the user has asked for something else
                if (version && version !== "1.0") {
                    return false;
                }

                if (feature === "dom-manipulation") {
                    // Scripts may make structural changes to the documentâ€™s DOM (applies to spine-level scripting only).
                    return true;
                }
                if (feature === "layout-changes") {
                    // Scripts may modify attributes and CSS styles that affect content layout (applies to spine-level scripting only).
                    return true;
                }
                if (feature === "touch-events") {
                    // The device supports touch events and the Reading System passes touch events to the content.
                    return false;
                }
                if (feature === "mouse-events") {
                    // The device supports mouse events and the Reading System passes mouse events to the content.
                    return true;
                }
                if (feature === "keyboard-events") {
                    // The device supports keyboard events and the Reading System passes keyboard events to the content.
                    return true;
                }

                if (feature === "spine-scripting") {
                    //Spine-level scripting is supported.
                    return true;
                }

                return false;
            },
    
            readium:
            {
            about: "Readium Foundation, IDPF",
            components:
            [
                {
                    name: "LauncherAppOSX",
                    description: "Native 'launcher' application",
                    url: "http://github.com/readium/",
                    version: "0.1.2",
                    commit_hash: "abcd"
                },
                {
                    name: "CoreCPP",
                    description: "Readium core C++ SDK",
                    url: "http://github.com/readium/",
                    version: "0.1.2",
                    commit_hash: "abcd"
                },
                {
                    name: "SharedJS",
                    description: "Readium shared JavaScript module",
                    url: "http://github.com/readium/",
                    version: "0.1.2",
                    commit_hash: "abcd"
                },
                {
                    name: "ReadiumJS",
                    description: "Readium JavaScript code for web browser 'cloud reader'",
                    url: "http://github.com/readium/",
                    version: "0.1.2",
                    commit_hash: "abcd"
                },
                {
                    name: "ReadiumJS_Viewer",
                    description: "Readium viewer application for web browser 'cloud reader'",
                    url: "http://github.com/readium/",
                    version: "0.1.2",
                    commit_hash: "abcd"
                },
                {
                    name: "ReadiumChrome",
                    description: "Readium Chrome extension",
                    url: "http://github.com/readium/",
                    version: "0.1.2",
                    commit_hash: "abcd"
                },
                {
                    name: "SimpleHTTPServer",
                    description: "Jim Dovey's HTTP server",
                    url: "http://github.com/readium/",
                    version: "0.1.2",
                    commit_hash: "abcd"
                },
                {
                    name: "CFI_JS",
                    description: "Readium CFI JavaScript library",
                    url: "http://github.com/readium/",
                    version: "0.1.2",
                    commit_hash: "abcd"
                },
            ]
            },
    
            epubWidget_GetSize: function(id)
            {
                if (!epubWidget) return;
     
                var widget = epubWidget.get(id);
                if (!widget) return;
        
                return widget.getSize();
            },
            epubWidget_PostMessage: function(id, msg)
            {
                if (!epubWidget) return;
        
                var widget = epubWidget.get(id);
                if (!widget) return;
        
                widget.postMessage(JSON.jsonify(msg));
            }
        };
    }

    
    var dumpObject = function(object, parent)
    {
        if (!object) return;

        for (var property in object)
        {
            if (!object.hasOwnProperty(property))
            {
                continue;
            }

            var index = parseInt(property);
            
            var value = object[property];
            
            var isObjectOrArray = value && (typeof value === 'object');
            
            var isFunction = false;
            if (value && value.call) isFunction = true;
            
            var li = document.createElementNS("http://www.w3.org/1999/xhtml", 'li');
            parent.appendChild(li);

            if (property === "name")
            {
                li.setAttribute("class", "name");
            }

            var span = document.createElementNS("http://www.w3.org/1999/xhtml", 'span');
            li.appendChild(span);
            span.setAttribute("class", "propName" + (!isNaN(index) ? " index" : (isObjectOrArray ? " objectOrArray" : "")));

            var txt = document.createTextNode(isNaN(index) ? property : ("#" + property));
            span.appendChild(txt);
            
            if (isObjectOrArray)
            {
                var ul = document.createElementNS("http://www.w3.org/1999/xhtml", 'ul');
                li.appendChild(ul);
            
                dumpObject(value, ul);
            }
            else
            {
                var div = document.createElementNS("http://www.w3.org/1999/xhtml", 'span');
                li.appendChild(div);
                div.setAttribute("class", "propValue" + (isFunction ? " function" : ""));

                txt = document.createTextNode(isFunction ? "function" : value);

                if (value.indexOf && value.indexOf("http") == 0)
                {
                    var a = document.createElementNS("http://www.w3.org/1999/xhtml", 'a');
                    div.appendChild(a);
                    a.appendChild(txt);
                    a.setAttribute("target", "_BLANK");
                    
                    a.setAttribute("href", value);
                }
                else
                {
                    div.appendChild(txt);
                }
            }
        }
    };
    
    
    var dropzone = document.getElementById("dropzone");
    var root = dropzone.parentNode;
    
    var ul = document.createElementNS("http://www.w3.org/1999/xhtml", 'ul');
    dumpObject(navigator.epubReadingSystem, ul);
    dropzone.insertBefore(ul, dropzone.childNodes[dropzone.childNodes.length-1]);



    function introspect(obj, filter, parent)
    {
        for (var prop in obj)
        {
            if (obj.hasOwnProperty(prop))
            {
// log(typeof obj);
// log(typeof prop);
                                
                var p = prop.toLowerCase();

                if (!filter ||
(p.indexOf("webkit") < 0 &&
p.indexOf("sliderizer") < 0 &&
(
    prop === "X"
//prop === "BKDOMCleanup"
//prop === "BKEpubLocation"
//prop === "BKContentTheme"
//prop === "BKSearchInsensitively" // native code
//prop === "BKConsoleLog" // native code
//prop === "__bk_original_addEventListener" // native code
//prop === "__BKPatchAddEventListener"
// prop === "stashedCFI" null
// prop === "lastClickedAnchorID" null
// prop === "stashCFIForClickedElement" null
//prop === "CFIUtilities"
//prop === "CFI"

//prop === "loadFunction" //document.__bk_original_addEventListener("click", stashCFIForClickedElement, true /* capture instead of bubble */);

//true
//prop.indexOf("on") === 0


// p.indexOf("read") >= 0
// p.indexOf("audio") >= 0 ||
// p.indexOf("aloud") >= 0 ||
// p.indexOf("smil") >= 0

// p.indexOf("bk") >= 0 ||
// p.indexOf("book") >= 0 ||
// p.indexOf("apple") >= 0 ||
// p.indexOf("html") >= 0 ||
// p.indexOf("nav") >= 0 ||
// p.indexOf("console") >= 0 ||
// p.indexOf("alert") >= 0
))
                )
                {
                    var newParent = parent + " >>> " + prop;
        
                    log("-----------------");
                    log(newParent);
            
                    var value = obj[prop];
                    var type = typeof value;
                    log(type);
log(value);
                    if (
//false &&
                    value !== null
                    &&
                    (type !== "undefined")
                    &&
                    (type !== "string")
                    &&
                    (type !== "number")
                    &&
                    (type !== "boolean")
                        //filter && // 1-recursive deep
                        //&& (isObjectOrArray || isFunction)
                    )
                    {
                        // if (value.toString)
                        // {
                        //     log(value.toString());
                        // }
                    
                        log("...");
                    
                        try
                        {
                            introspect(value, false, newParent);
                        }
                        catch(e)
                        {
                            log("oops!");
                            log(e);
                        }
                    }
            
                    //log(isObjectOrArray ? "isObjectOrArray" : (isFunction ? "isFunction" : "??"));
                }
            }
        }
    }
    
    function log(text)
    {
        // var p = document.createElementNS("http://www.w3.org/1999/xhtml", 'p');
        // var txt = document.createTextNode(text);
        // p.appendChild(txt);
        // root.insertBefore(p, root.childNodes[0]);
        
        console.log(text);
    }
    
    if (typeof BKConsoleLog !== "undefined")
    {
        BKConsoleLog("BKConsoleLog();");
        //BKConsoleLog(window.console.log); // NATIVE FUNCTION CODE
    
        if (true
            //typeof window.console === "undefined"
        )
        {
            BKConsoleLog("HIJACK window.console");
        
            window.console = {
                log: function(txt){BKConsoleLog(txt);},
                debug:  function(txt){BKConsoleLog(txt);},
                warn:  function(txt){BKConsoleLog(txt);},
                error: function(txt){BKConsoleLog(txt);}
            };
        
            window.alert = function(txt){BKConsoleLog(txt);}
        }
    }

    //alert("ALERT");
    console.log("LOG");
    console.error("ERROR");
    console.debug("DEBUG");
    console.warn("WARN");
    
    //log(window.parent.document.body.innerHTML.toString());
    

    log("INTROSPECT: " + window.location.href);
    
    introspect(window, true, "window");
    //introspect(window.document, true, "document");
    
    setTimeout(function()
    {
        var spinner = document.getElementById("spinner");
        spinner.style.display = "none";
        
        //window.setTimeout(function() { window.location = "warn://events"; }, 2000);

        // setTimeout(function()
        // {
        //     try
        //     {
        //         console.log("Attempting hack...");
        //         //window.parent.document.body.innerHTML = "HACKED";
        //     }
        //     catch(e)
        //     {
        //         console.error(e);
        //         console.log("Cannot hack host.");
        //     }
        // }, 1000);
        
    }, 500);
}
